on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

env:
  AWS_REGION: ${{ vars.AWS_REGION }}                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY_NAME }} # set this to your Amazon ECR repository name
  ECS_SERVICE: ${{ vars.AWS_ECS_SERVICE }}            # set this to your Amazon ECS service name
  ECS_CLUSTER: ${{ vars.AWS_ECS_CLUSTER }}            # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION_FILE: task-definition.json  # set this to the path to your Amazon ECS task definition - this is downloaded from aws
  ECS_TASK_DEFINITION: ${{ vars.AWS_TASK_DEFINITION }}

jobs:
  deploy:
    name: ${{ inputs.environment }} Deployment
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Extract version and set it to API_VERSION env var
        run: |
          echo "API_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > ${{ env.ECS_TASK_DEFINITION_FILE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and publish a manifest (no separate docker push)
      - name: Build and push image (arm64)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          provenance: false
          build-args: |
            API_PORT=${{ vars.PORT }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.API_VERSION }}

      - name: Fill in the new image tag in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_FILE }}
          container-name: ${{ env.ECR_REPOSITORY }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.API_VERSION }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
